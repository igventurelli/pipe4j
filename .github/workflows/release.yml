name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  generate-new-version:
    name: Generate New Version
    runs-on: ubuntu-latest
    outputs:
      out: ${{ steps.next-version-step.outputs.out }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm i @conveyal/maven-semantic-release
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'
      - name: Generate Next Version
        id: next-version-step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SEMANTIC_RELEASE_OUTPUT=$(npx semantic-release \
          --prepare @conveyal/maven-semantic-release \
          --publish @semantic-release/github,@conveyal/maven-semantic-release \
          --verify-conditions @semantic-release/github,@conveyal/maven-semantic-release \
          --verify-release @conveyal/maven-semantic-release \
          --skip-maven-deploy \
          --use-conveyal-workflow) | tail -n 1 \
          && echo "out=$SEMANTIC_RELEASE_OUTPUT"  >> "$GITHUB_OUTPUT"

  publish-maven-central:
    name: Publish on Maven Central
    runs-on: ubuntu-latest
    needs: generate-new-version
    if: ${{ (!contains(needs.generate-new-version.outputs.out, 'There are no relevant changes, so no new version is released')) && (needs.generate-new-version.status == 'success') }}
    steps:
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Publish to Maven Central
        run: mvn deploy
        env:
          MAVEN_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}